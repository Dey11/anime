datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  emailVerified   DateTime?
  username        String?          @unique
  password        String?
  dob             String?
  bio             String?
  bannerColor     String?          @default("#000000")
  image           String?
  accounts        Account[]
  sessions        Session[]
  favouriteAnimes FavouriteAnime[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Comments  Comments[]
  Replies   Replies[]
  likes     likes[]

  @@unique([id, username])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model FavouriteAnime {
  animeId       String   @unique
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  title         String
  image         String
  releaseDate   String
  subOrDub      String?
  status        String?
  type          String?
  // genres        Genres[]?
  totalEpisodes Int?
  updatedAt     DateTime @updatedAt
}

model Errors {
  errorId     String   @id @default(cuid())
  username    String
  description String
  url         String?
  createdAt   DateTime @default(now())
}

model Comments {
  commentId   String    @id @default(cuid())
  episodeId   String
  animeId     String
  userId      String
  username    String
  description String
  likes       likes[]
  replies     Replies[]

  user User @relation(fields: [userId, username], references: [id, username])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Replies {
  replyId     String  @id @default(cuid())
  commentId   String
  userId      String
  username    String
  description String
  likes       likes[]

  user     User     @relation(fields: [userId, username], references: [id, username])
  comments Comments @relation(fields: [commentId], references: [commentId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model likes {
  likeId    String  @id @default(uuid())
  userId    String
  episodeId String
  animeId   String
  commentId String?
  replyId   String?

  user    User      @relation(fields: [userId], references: [id])
  comment Comments? @relation(fields: [commentId], references: [commentId])
  reply   Replies?  @relation(fields: [replyId], references: [replyId])

  createdAt DateTime @default(now())
}
